# ISSUE_QUERY.graphql
query IssueQuery($number: Int!) {
  repository(owner: "facebook", name: "react") {
    issue(number: $number) {
      id
      number
      title
      createdAt
      comments {
        totalCount
      }
      state
      body
      url
    }
  }
}

# GET_ISSUES_DETAILED.graphql
query IssuesList($repo: String!, $state: [IssueState!], $cursor: String, $pageSize: Int) {
  repository(owner: "facebook", name: $repo) {
    issues(first: $pageSize, after: $cursor, states: $state) {
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          id
          number
          title
          state
          createdAt
          comments {
            totalCount
          }
        }
      }
    }
  }
}

# ISSUES_COUNT_QUERY.graphql
query {
  repository(owner: "facebook", name: "react") {
    openedCount: issues(states: [OPEN]) {
      totalCount
    }
    closedCount: issues(states: [CLOSED]) {
      totalCount
    }
  }
}

# COMMENTS_QUERY.graphql
query IssueCommentList($owner: String!, $name: String!, $number: Int!) {
  repository(owner: $owner, name: $name) {
    issue(number: $number) {
      id
      comments(first: 30) {
        edges {
          node {
            id
            author {
              login
              avatarUrl
            }
            body
            createdAt
          }
        }
      }
    }
  }
}
